name: Cmake Auto Build

on:
  push:
    paths:
      - "VERSION"
  workflow_dispatch:
    inputs:
      name:
        description: "reason"
        required: true
        default: "any"

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  create:
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v3
      - name: version
        shell: bash --login {0}
        run: echo "::set-output name=version::$(cat VERSION)"
        id: version
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body: auto build.
          draft: false
          prerelease: false

  build:
    needs: [create]
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3
      # make and build applications
      - name: build
        shell: bash --login {0}
        run: |
          pip install cmake ninja
          PATH=$PATH:$(python -c "import sysconfig; print(sysconfig.get_path('scripts'))")
          cmake -G Ninja -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
          cmake --build build --config ${{env.BUILD_TYPE}}
          gzip build/muteteams.exe
      - name: VirusTotal Monitor Scan
        uses: crazy-max/ghaction-virustotal@v2
        with:
          vt_api_key: ${{ secrets.VT_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          update_release_body: true
          files: build/muteteams.exe.gz

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: build/muteteams.exe.gz
          asset_name: muteteams.exe.gz
          asset_content_type: application/gzip
